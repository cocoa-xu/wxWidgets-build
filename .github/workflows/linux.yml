name: wxwidgets-linux

on:
  workflow_dispatch:
    inputs:
      verison:
        description: 'wxWidgets Version'
        required: true
      build_arm64:
        description: 'Build ARM64'
        required: false
        default: 'true'
      build_x86_64:
        description: 'Build x86_64'
        required: false
        default: 'true'
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.job.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: "aarch64-linux-gnu", runs-on: "ubuntu-latest", library: "static", image: "ubuntu:20.04", platform: "linux/arm64" }
          - { target: "aarch64-linux-gnu", runs-on: "ubuntu-latest", library: "shared", image: "ubuntu:20.04", platform: "linux/arm64" }
          - { target: "x86_64-linux-gnu", runs-on: "ubuntu-20.04", library: "static" }
          - { target: "x86_64-linux-gnu", runs-on: "ubuntu-20.04", library: "shared" }

    name: ${{ matrix.job.target }} - ${{ matrix.job.library }}

    steps:
      - name: Build Check
        id: build-check
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "build=true" >> $GITHUB_OUTPUT
          else
            if [ "${{ matrix.job.target }}" == "aarch64-linux-gnu" ]; then
              echo "build=${{ inputs.build_arm64 }}" >> $GITHUB_OUTPUT
              echo "docker=true" >> $GITHUB_OUTPUT
            fi

            if [ "${{ matrix.job.target }}" == "x86_64-linux-gnu" ]; then
              echo "build=${{ inputs.build_x86_64 }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Checkout
        if: steps.build-check.outputs.build == 'true'
        uses: actions/checkout@v4

      - name: Get version
        if: steps.build-check.outputs.build == 'true'
        id: build-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            export BUILD_VERSION_V=${{ inputs.verison }}
          elif [ "${{ github.event_name }}" = "push" ]; then
            export BUILD_VERSION_V=${GITHUB_REF##*/v}
          else
            exit 1
          fi

          export BUILD_VERSION="${BUILD_VERSION_V#v}"
          echo "version=v${BUILD_VERSION}" >> $GITHUB_OUTPUT

      - name: Pull docker image
        if: steps.build-check.outputs.docker == 'true'
        run: |
          sudo docker pull --platform=${{ matrix.job.platform }} ${{ matrix.job.image }}

      - name: Install binfmt
        if: steps.build-check.outputs.docker == 'true'
        run: |
          sudo apt update
          sudo apt install -y binfmt-support qemu-user-static

      - name: Restore Source Code
        if: steps.build-check.outputs.build == 'true'
        id: cache-src
        uses: actions/cache/restore@v4
        with:
          key: src-${{ steps.build-version.outputs.version }}
          path: |
            ./wxWidgets

      - name: Get source code
        if: steps.build-check.outputs.build == 'true' && steps.cache-src.outputs.cache-hit != 'true'
        run: |
          export BUILD_VERSION_V=${{ steps.build-version.outputs.version }}
          git clone --branch "${BUILD_VERSION_V}" https://github.com/wxWidgets/wxWidgets.git wxWidgets
          cd wxWidgets
          git submodule update --init --recursive

      - name: Cache Source Code
        if: steps.build-check.outputs.build == 'true' && steps.cache-src.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: src-${{ steps.build-version.outputs.version }}
          path: |
            ./wxWidgets

      - name: Show last commit of wxWidgets
        if: steps.build-check.outputs.build == 'true'
        run: |
          cd wxWidgets
          git log -1 --stat

      - name: Compile libraries
        if: steps.build-check.outputs.build == 'true'
        id: target
        run: |
          export ROOTDIR="$(pwd)"
          export BUILD_VERSION_V="${{ steps.build-version.outputs.version }}"
          export LIBRARY_TYPE="${{ matrix.job.library }}"
          export TARGET="${{ matrix.job.target }}"
          export JOBS="$(nproc)"

          cp ./.github/scripts/install-deps-linux.sh ./install-deps-linux.sh
          chmod a+x ./install-deps-linux.sh
          cp ./.github/scripts/do-build.sh ./do-build.sh
          chmod a+x ./do-build.sh

          if [ "${{ steps.build-check.outputs.docker }}" = "true" ]; then
            cp ./.github/scripts/docker-build.sh ./docker-build.sh
            chmod a+x ./docker-build.sh

            ./docker-build.sh "${{ matrix.job.platform }}" "${{ matrix.job.image }}" "${ROOTDIR}" "${BUILD_VERSION_V}" "${LIBRARY_TYPE}" "${TARGET}" "${JOBS}"
          else
            ./install-deps-linux.sh "${TARGET}" "${{ matrix.job.runs-on }}"
            ./do-build.sh "${ROOTDIR}" "${BUILD_VERSION_V}" "${LIBRARY_TYPE}" "${TARGET}" "${JOBS}"
          fi

      - name: Upload binaries
        uses: softprops/action-gh-release@v2
        if: steps.build-check.outputs.build == 'true'
        with:
          tag_name: ${{ steps.build-version.outputs.version }}
          name: ${{ steps.build-version.outputs.version }}
          files: |
            build/*.tar.gz
            build/*.sha256
